// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"

  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]

  LikedComments LikedComments[]
  LikedPosts    LikedPosts[]

  DisLikedComments DisLikedComments[]
  DisLikedPosts    DisLikedPosts[]
  Profile          Profile[]

  Sports   Sports? @relation(fields: [sportsId], references: [id])
  sportsId String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id     String  @id @default(cuid())
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  profileImageUrl String
  link1           String @default("")
  nickname        String
  address         String
  description     String

  sports   Sports? @relation(fields: [sportsId], references: [id])
  sportsId String?

  isAdmin Boolean @default(false)

  createdAt DateTime @default(now())
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     String
  author      User?     @relation(fields: [authorEmail], references: [email])
  authorEmail String?
  createdAt   DateTime  @default(now())
  comments    Comment[]

  sports   Sports? @relation(fields: [sportsId], references: [id])
  sportsId String?

  viewCount Int @default(0)

  LikedPosts    LikedPosts[]
  DisLikedPosts DisLikedPosts[]

  category String @default("")

  SubCategory   SubCategory? @relation(fields: [subCategoryId], references: [id])
  subCategoryId String?
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())

  author      User?   @relation(fields: [authorEmail], references: [email])
  authorEmail String?

  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  LikedComments    LikedComments[]
  DisLikedComments DisLikedComments[]
}

model Sports {
  id        String    @id @default("")
  createdAt DateTime  @default(now())
  name      String
  Post      Post[]
  User      User[]
  Profile   Profile[]
}

model SubCategory {
  id          String   @id @default("")
  createdAt   DateTime @default(now())
  name        String
  description String   @default("")
  Post        Post[]
}

model LikedPosts {
  id String @id @default(cuid())

  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  personLiked      User?   @relation(fields: [personLikedEmail], references: [email])
  personLikedEmail String?
}

model DisLikedPosts {
  id String @id @default(cuid())

  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  personDisLiked      User?   @relation(fields: [personDisLikedEmail], references: [email])
  personDisLikedEmail String?
}

model LikedComments {
  id String @id @default(cuid())

  Comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?

  personLiked      User?   @relation(fields: [personLikedEmail], references: [email])
  personLikedEmail String?
}

model DisLikedComments {
  id String @id @default(cuid())

  Comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?

  personDisLiked      User?   @relation(fields: [personDisLikedEmail], references: [email])
  personDisLikedEmail String?
}
